local collision = require "modules.collision"

go.property("velocity", vmath.vector3())

local gravity = 1000

function init(self)

    self.position = go.get_position()
    self.sprite_flipped = false
    self.current_anim = "stand-idle"

    self.correction = vmath.vector3()
    self.ground_contact = false

    self.projectiles = {}

    self.aabb_id = collision.add_enemy(msg.url('.'))
end

local function set_facing_direction(self)
    local enemy_position = self.position
    local player_position = self.player_position

    local x_diff = player_position.x - enemy_position.x

    if x_diff < 0 then
        self.sprite_flipped = true
    elseif x_diff > 0 then
        self.sprite_flipped = false
    end

    sprite.set_hflip("#base", self.sprite_flipped)
    sprite.set_hflip("#body", self.sprite_flipped)
    sprite.set_hflip("#head", self.sprite_flipped)
    sprite.set_hflip("#accessory", self.sprite_flipped)
end

local function apply_gravity(self, dt)
    if not self.ground_contact then
        self.velocity.y = self.velocity.y + (-gravity * dt)
    end
end

local function calculate_move(self, dt)

    apply_gravity(self, dt)

end

local function attack(self, dt)
    local enemy_position = self.position
    local player_position = self.player_position

    if math.abs(enemy_position.y - player_position.y) <= 20 then

        print("Enemy and player are within 100 units on the Y-axis!")
        local direction = self.sprite_flipped and -1 or 1
        local offset_x = 10 * direction
        local offset_y = 5
        local spawn_position = vmath.vector3(
            enemy_position.x + offset_x,
            enemy_position.y + offset_y,
            enemy_position.z
        )
        local speed = 1000
        local projectile_velocity = vmath.vector3(speed * direction, 0, 0)
        local rotation = self.sprite_flipped and vmath.quat_rotation_z(math.pi) or nil
        local projectile = factory.create("#projectile_factory", spawn_position, rotation, { velocity = projectile_velocity })
        table.insert(self.projectiles, projectile)

    end
end

function update(self, dt)

    self.player_position = go.get_position("/player#player")
    self.position = collision.check_entity(self, self.position)

    calculate_move(self, dt)

    attack(self, dt)

    -- animate(self, dt)
    set_facing_direction(self)



    go.set_position(self.position + self.velocity * dt)

    self.wall_contact_left = false
    self.wall_contact_right = false
    self.ground_contact = false
    self.correction = vmath.vector3()
end