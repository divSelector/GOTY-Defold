local state = require "modules.state"
local input = require "modules.input"


local fade_time = 0.5


local function fade_in(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 1, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end

local function fade_out(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 0, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end


function init(self)
	input.init()

	self.timer_node = gui.get_node("time")

	self.fade_overlay_node = gui.get_node("fade_overlay")
	gui.set_color(self.fade_overlay_node, vmath.vector4(0.859,0.835,0.431, 0))

    msg.post("#gameproxy", "load")
end

function on_message(self, message_id, message, sender)

	if message_id == hash("load_level") then
		state.timer.is_running = false
		
		fade_in(self, function()
            msg.post("#gameproxy", "unload")
        end)

	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		fade_out(self)
		state.timer.is_running = true

	elseif message_id == hash("proxy_unloaded") then
		daabbcc.reset()
		msg.post("#gameproxy", "load")
	end

end

function update(self, dt)
	if state.timer.is_running then
		local time = state.timer.time + dt
		local minutes = math.floor(time / 60)
		local seconds = math.floor(time % 60)
		local milliseconds = math.floor((time * 100) % 100)
		gui.set_text(self.timer_node, string.format("%02d:%02d.%02d", minutes, seconds, milliseconds))
		state.timer.time = time
	end
end

function on_input(self, action_id, action)

	input.capture(action_id, action)
	
	if not action.pressed then return end
	if action_id == hash("debug_1") then
		state.current_level = "one"
		msg.post(".", "load_level")
	elseif action_id == hash("debug_2") then
		state.current_level = "test"
		msg.post(".", "load_level")
	end

end