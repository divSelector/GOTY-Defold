local state = require "modules.state"
local input = require "modules.input"
local menu = require "modules.menu"

local fade_time = 0.5

local function fade_in(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 1, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end

local function fade_out(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 0, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end

local function pause_game(self, force_pause)
    local should_pause

    if force_pause == nil then
        should_pause = not state.is_paused
    else
        should_pause = force_pause
    end

    local mode = should_pause and 0 or 1
    msg.post("main:/main#gameproxy", "set_time_step", { factor = mode, mode = mode })
    
    state.is_paused = should_pause
    state.timer.is_running = not should_pause

    if should_pause then
        fade_in(self, function()
            menu.show_menu = true
        end)
    else
        menu.show_menu = false
        fade_out(self, function() end)
    end
end


function init(self)

	window.set_listener(function(self, event, data)
		if event == window.WINDOW_EVENT_FOCUS_LOST then
			pause_game(self, true)
		elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
			pause_game(self, false)
		end
	end)

	input.init()

	self.timer_node = gui.get_node("time")
	gui.set_color(self.timer_node, vmath.vector4(0.433,0.571,0.359, 1))
	self.timer_bg_node = gui.get_node("time_bg")
	gui.set_color(self.timer_bg_node, vmath.vector4(0.859,0.835,0.431, 1))


	self.fade_overlay_node = gui.get_node("fade_overlay")
	gui.set_color(self.fade_overlay_node, vmath.vector4(0.859,0.835,0.431, 0))

    msg.post("#gameproxy", "load")
end


function on_message(self, message_id, message, sender)

    if message_id == hash("load_level") then
        state.timer.is_running = false

        if state.current_level == nil then
            state.victory = true
        end

        fade_in(self, function()
            msg.post("#gameproxy", "unload")
        end)

    elseif message_id == hash("proxy_unloaded") then
        daabbcc.reset()
        
        if state.victory then
            print("You are victorious")
            return
        end
        
        -- Ensure we don't load the next level if victory is set
        msg.post("#gameproxy", "load")

    elseif message_id == hash("proxy_loaded") then
        msg.post(sender, "enable")
        fade_out(self)
        state.timer.is_running = true
		state.pause_allowed = true
    end

end

local function update_timer(self, dt)
	if state.timer.is_running then
		local time = state.timer.time + dt
		local minutes = math.floor(time / 60)
		local seconds = math.floor(time % 60)
		local milliseconds = math.floor((time * 100) % 100)
		gui.set_text(self.timer_node, string.format("%02d:%02d:%02d", minutes, seconds, milliseconds))
		state.timer.time = time
	end
end

function update(self, dt)

	menu.update()

	update_timer(self, dt)

	if webgl_memory then
		local info = webgl_memory.get_info()
		print("GPU memory used in total: " .. math.floor(info.memory.total / 1024 / 1024) .. " MB")
		print("CPU heap size: " .. math.floor(info.memory.wasmheap / 1024 / 1024) .. " MB")
	end
end


function on_input(self, action_id, action)

	input.capture(action_id, action)

	if not action.pressed then return end

	if action_id == hash("key_esc") and state.pause_allowed then
		pause_game(self)
	end

end
