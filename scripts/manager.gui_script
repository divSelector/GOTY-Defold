local state = require "modules.state"
local input = require "modules.input"
local menu = require "modules.menu"
local audio = require "modules.audio"


local fade_time = 0.5

local easing_functions = {
    gui.EASING_LINEAR,
    gui.EASING_INSINE,
    gui.EASING_OUTSINE,
    gui.EASING_INOUTSINE,
    gui.EASING_INQUAD,
    gui.EASING_OUTQUAD,
    gui.EASING_INOUTQUAD,
    gui.EASING_INCUBIC,
    gui.EASING_OUTCUBIC,
    gui.EASING_INOUTCUBIC,
    gui.EASING_INBACK,
    gui.EASING_OUTBACK,
    gui.EASING_INOUTBACK,
    gui.EASING_INELASTIC,
    gui.EASING_OUTELASTIC,
    gui.EASING_INOUTELASTIC,
    gui.EASING_INBOUNCE,
    gui.EASING_OUTBOUNCE,
    gui.EASING_INOUTBOUNCE
}

local function get_random_easing()
    return easing_functions[math.random(1, #easing_functions)]
end

local function get_random_playback()
    local random_value = math.random()  -- Get a value between 0 and 1
    local biased_value = random_value * random_value  -- Square to favor higher and lower numbers
    return biased_value * (1.5 - 0.25) + 0.25  -- Scale to the range [0.25, 1.5]
end


local function fade_in(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 1, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end

local function fade_out(self, callback)
    gui.animate(self.fade_overlay_node, "color.w", 0, gui.EASING_LINEAR, fade_time, 0, function()
        if callback then callback() end
    end)
end

local function pause_game(self, force_pause)
    local should_pause

    if force_pause == nil then
        should_pause = not state.is_paused
    else
        should_pause = force_pause
    end

    local mode = should_pause and 0 or 1
    msg.post("main:/main#gameproxy", "set_time_step", { factor = mode, mode = mode })
    
    state.is_paused = should_pause
    state.timer.is_running = not should_pause

    if should_pause then
        fade_in(self, function()
            menu.show_menu = true
        end)
    else
        menu.show_menu = false
        print("unpausing")
        msg.post("game:/player#skins", "set_player_skin") 
        fade_out(self, function() end)
    end
end


function init(self)

    audio.play_sound("bgm")

	window.set_listener(function(self, event, data)
		if event == window.WINDOW_EVENT_FOCUS_LOST then
			pause_game(self, true)
		elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
			pause_game(self, false)
		end
	end)

	input.init()

	self.timer_node = gui.get_node("time")
    self.original_timer_position = gui.get_position(self.timer_node)
	self.ball_count_node = gui.get_node("ball_count")
	gui.set_color(self.timer_node, vmath.vector4(0.433,0.571,0.359, 1))
	gui.set_color(self.ball_count_node, vmath.vector4(0.433,0.571,0.359, 1))

	self.timer_bg_node = gui.get_node("time_bg")
    self.ball_bg_node = gui.get_node("ball_bg")
	gui.set_color(self.timer_bg_node, vmath.vector4(0.859,0.835,0.431, 1))
    gui.set_color(self.ball_bg_node, vmath.vector4(0.859,0.835,0.431, 1))


	self.fade_overlay_node = gui.get_node("fade_overlay")
	gui.set_color(self.fade_overlay_node, vmath.vector4(0.859,0.835,0.431, 0))

    msg.post("#gameproxy", "load")
end

function on_message(self, message_id, message, sender)

    if message_id == hash("load_level") then
        state.timer.is_running = false

        if state.current_level == nil then
            state.victory = true
        end

        fade_in(self, function()
            msg.post("#gameproxy", "unload")
        end)

    elseif message_id == hash("proxy_unloaded") then
        daabbcc.reset()

        if state.victory then
            print("You are victorious")
            window.set_listener(nil)
            audio.stop_sound("bgm")
            audio.play_sound("victory")

            local screen_center = gui.get_position(gui.get_node("screen_center_ref"))

            gui.set_color(self.timer_bg_node, vmath.vector4(0.859,0.835,0.431, 0)) -- make transparent
            gui.set_color(self.ball_bg_node, vmath.vector4(0.859,0.835,0.431, 0))
            -- gui.animate(self.fade_overlay_node, "color", vmath.vector4(0.2, 0.274, 0.165, 1), gui.EASING_OUTCUBIC, 3.5) 
            gui.animate(self.fade_overlay_node, "color", vmath.vector4(0.10196, 0.10196, 0.10196, 1), gui.EASING_OUTCUBIC, 3.5) 
            gui.animate(self.timer_node, "position", screen_center, gui.EASING_OUTCUBIC, 5.5)
            gui.animate(self.timer_node, "scale", vmath.vector3(3, 3, 0), gui.EASING_OUTCUBIC, 5.5)

            local victory_message
            if state.ball_count == state.total_balls then
                gui.play_particlefx(gui.get_node("victory_particlefx"))
                victory_message = "<line>a winner is you"
            else
                victory_message = "balls<line>or gtfo"
            end

            local player_node = gui.get_node("player")
            gui.set_color(player_node, vmath.vector4(1, 1, 1, 1))
            gui.play_flipbook(player_node, "run", nil, { playback_rate = 1.75 })
            local player_pos = gui.get_position(player_node)
            local start_x = player_pos.x - 400
            local end_x = start_x + 400
            local duration = 3.0
            local delay = 0
            -- local easing = gui.EASING_OUTELASTIC
            local moving_to_end = false  -- Track direction
            
            local function animate()
                local easing = get_random_easing()
                gui.play_flipbook(player_node, "run", nil, { playback_rate = get_random_playback() })
                local target_x = moving_to_end and end_x or start_x
                local scale_x = moving_to_end and -2 or 2
                gui.set_scale(player_node, vmath.vector3(scale_x, 2, 1))
                moving_to_end = not moving_to_end  -- Toggle direction
                gui.animate(player_node, "position.x", target_x, easing, duration, delay, animate)
            end



            timer.delay(3.5, false, function()
                msg.post("main:/main#dialog", "play_dialog", {
                    dialog = victory_message,
                    priority = 100
                })
                animate()
            end)


            return
        end
        
        -- Ensure we don't load the next level if victory is set
        msg.post("#gameproxy", "load")

    elseif message_id == hash("proxy_loaded") then
        msg.post(sender, "enable")
        fade_out(self)
        state.timer.is_running = true
		state.pause_allowed = true


    elseif message_id == hash("restart_game") then
        pause_game(self, false)
        msg.post("#gameproxy", "unload")
    end

end

local function update_timer(self, dt)
	if state.timer.is_running then
		local time = state.timer.time + dt
		local minutes = math.floor(time / 60)
		local seconds = math.floor(time % 60)
		local milliseconds = math.floor((time * 100) % 100)
		gui.set_text(self.timer_node, string.format("%02d:%02d:%02d", minutes, seconds, milliseconds))
		state.timer.time = time
	end
end

function update(self, dt)

	menu.update()

	update_timer(self, dt)

    gui.set_text(self.ball_count_node, state.ball_count .. "/" .. state.total_balls)

end


function on_input(self, action_id, action)

	input.capture(action_id, action)

	if not action.pressed then return end

	if action_id == hash("key_tab") and state.pause_allowed then
		pause_game(self)
    elseif action_id == hash("key_tab") and state.victory then
        -- restart?
	end

end
