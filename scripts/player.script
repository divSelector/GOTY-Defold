local input = require "modules.input"
local utils = require "modules.utils"
local collision = require "modules.collision"

go.property("velocity", vmath.vector3())

local idle_threshold = 0.18

-- local move_speed = 10
local move_speed = 100
local max_speed = 250

local momentum_increment = 3
local momentum_decay = 3
local max_momentum = 5

local anim_playback_min = 0.8
local anim_playback_max = 2.0

local gravity_rise = 1000
local gravity_fall = 1800
local gravity_fall_resisted = 500

local jump_height_min = 44
local jump_height_max = 56
local jump_increment_min = 200
local jump_increment_max = 300

local coyote_duration_min = 0.05
local coyote_duration_max = 0.1

local slide_speed_min = 0
local slide_speed_max = 500
local slide_duration_min = 0.1
local slide_duration_max = 0.3
local slide_cooldown_duration = 0.5

local y_velocity_max = 900

local jump_height_increment = 5
local max_jump_streak = 3

local attack_delay_time = 0.15

local knockback_delay_time = 0.5
local knockback_velocity_multiplier = 1.25

local function decay_momentum(self, additional_decay)

    local additional_decay = additional_decay or 0

    self.momentum = self.momentum - (momentum_decay + additional_decay)
    if self.momentum < 0 then
        self.momentum = 0
    end
end

local function deaccelerate(self, dt, multiplier)

    local multiplier = multiplier or 1

    -- Gradually reduce speed based on momentum
    if self.momentum > 0 then
        local deceleration = momentum_decay * dt * multiplier

        -- Apply deceleration in the direction of movement
        self.velocity.x = self.velocity.x - utils.sign(self.velocity.x) * deceleration

        -- Clamp velocity to zero to avoid overshooting
        if math.abs(self.velocity.x) < deceleration then
            self.velocity.x = 0
        end

        -- Reduce momentum proportionally to the deceleration
        self.momentum = math.max(self.momentum - deceleration, 0)
    else
        -- When momentum is depleted, stop completely
        self.velocity.x = 0
    end
end

function init(self)
    -- input.get_focus()
    msg.post(".", "acquire_input_focus")

    msg.post("/camera#camera", "acquire_camera_focus")
    msg.post("@render:", "use_camera_projection")

    self.position = go.get_position()

    self.idle_timer = 0
    self.slide_timer = 0
    self.slide_cooldown_timer = 0

    self.sprite_flipped = false
    self.current_anim = "stand-idle"

    self.momentum = 0

    self.ground_contact = false

    self.is_crouching = false
    self.can_jump = true

    self.jump_distance = 0
    self.coyote_time = 0
    self.coyote_allowed = false

    self.jump_streak = 0
    self.jump_streak_increment = 0
    self.last_jump_momentum = 0

    self.can_attack = true
    self.attack_hold_time = 0

    self.aabb_id = collision.add_player("/player")

    -- received from level.script
    self.platforms = {}
    self.enemies = {}

    self.is_prone = false
    self.is_prone_without_headroom = false
    self.is_prone_direction = nil

    self.velocity_unparallaxed = vmath.vector3()

    self.decay_momentum = function()
        decay_momentum(self, -1)
    end

    self.last_x = self.position.x
end


local function slide(self, dt)

    self.is_prone = input.key_state.crouch and input.key_state.action and self.ground_contact
    self.is_crouching = input.key_state.crouch and self.ground_contact and not self.is_prone

    if self.is_prone_without_headroom then
        self.is_prone = true
    end

    -- decrease slide timer and end slide
    if self.slide_timer > 0 then
        self.slide_timer = self.slide_timer - dt
        if self.slide_timer <= 0 then
            self.velocity.x = 0
            decay_momentum(self)
        end
    end

    local interrupt_movement = false

    if self.slide_timer > 0 then
        -- Maintain slide velocity during the slide
        interrupt_movement = true
        return interrupt_movement
    end

    if self.slide_cooldown_timer > 0 then
        self.slide_cooldown_timer = self.slide_cooldown_timer - dt
    end

    if input.key_state.crouch and self.ground_contact then
        self.can_jump = false
        if input.key_state.action and self.slide_cooldown_timer <= 0 then

            if self.slide_timer <= 0 and self.slide_cooldown_timer <= 0 then
                -- Start sliding
                self.slide_timer =  slide_duration_min + ((self.momentum / max_momentum) * (slide_duration_max - slide_duration_min))
                self.slide_cooldown_timer = slide_cooldown_duration
                local slide_speed = slide_speed_min + ((self.momentum / max_momentum) * (slide_speed_max - slide_speed_min))
                self.velocity.x = (self.sprite_flipped and -1 or 1) * slide_speed
                interrupt_movement = true
                return interrupt_movement
            end
        else
            self.velocity.x = 0 -- Stop movement when crouching without sliding
        end
        interrupt_movement = true
        return interrupt_movement
    end
    return interrupt_movement
end

local function jump(self, dt)
    
    -- Handle coyote time
    self.coyote_duration = coyote_duration_min + ((self.momentum / max_momentum) * (coyote_duration_max - coyote_duration_min))

    if self.ground_contact then
        self.coyote_time = 0
        self.coyote_allowed = true
    else
        if self.coyote_allowed then
            self.coyote_time = math.min(self.coyote_time + dt, self.coyote_duration)
            if self.coyote_time >= self.coyote_duration then
                self.coyote_allowed = false
            end
        end
    end

    -- Start the jump
    if input.key_state.action and self.can_jump and (self.coyote_allowed and self.coyote_time < self.coyote_duration) then

        -- Check if the momentum is consistent or increasing
        if self.momentum >= self.last_jump_momentum then
            if self.jump_streak < max_jump_streak then
                self.jump_streak = self.jump_streak + 1
                self.jump_streak_increment = jump_height_increment * self.jump_streak
            else
                self.jump_streak = 0
            end
        else
            -- Reset streak if momentum decreases
            self.jump_streak = 0
            self.jump_streak_increment = 0
        end

        -- Update the last jump momentum
        self.last_jump_momentum = self.momentum

        -- Adjust jump height based on streak
        self.current_jump_height = 
            jump_height_min + self.jump_streak_increment + 
            ((self.momentum / max_momentum) * (jump_height_max + self.jump_streak_increment - jump_height_min))

        self.ground_contact = false
        self.can_jump = false -- Prevent double jumps
        self.is_jumping = true
        self.jump_start_y = go.get_position().y -- Store the starting vertical position
        self.coyote_allowed = false
    end

    -- Continue the jump while holding the button and within the max jump height
    if input.key_state.action and self.is_jumping then
        local current_y = go.get_position().y
        local jump_distance = current_y - self.jump_start_y

        if jump_distance < self.current_jump_height then
            local jump_increment = jump_increment_min + ((self.momentum / max_momentum) * (jump_increment_max - jump_increment_min))
            self.velocity.y = jump_increment
        else
            -- Stop jumping if max height is reached
            self.is_jumping = false
        end
    end

    -- Interrupt the jump if the button is released
    if not input.key_state.action then
        self.is_jumping = false
    end

    if self.ground_contact and not input.key_state.action and not self.is_crouching then
        self.can_jump = true
        self.is_jumping = false
    end
end

local function fire(self)
    -- Fire attack logic
    local direction = self.sprite_flipped and -1 or 1
    local offset_x = 10 * direction
    local offset_y = input.key_state.crouch and -8 or 5
    local player_position = go.get_position()
    local spawn_position = vmath.vector3(
        player_position.x + offset_x,
        player_position.y + offset_y,
        player_position.z
    )
    local speed = 500 + (self.momentum / max_momentum) * (1000 - 500)
    local projectile_velocity = vmath.vector3(speed * direction, 0, 0)
    local rotation = self.sprite_flipped and vmath.quat_rotation_z(math.pi) or nil
    local projectile = factory.create("#projectile_factory", spawn_position, rotation, { 
        velocity = projectile_velocity,
        from_player = true
    })
end

local function attack(self, dt)

    if (input.key_state.crouch and input.key_state.action) or self.is_prone then
        return
    end

    if input.key_state.attack then

        if self.ground_contact then
            decay_momentum(self, 2)
        end

        if not self.is_charging_attack then
            self.is_charging_attack = true
            self.charge_timer = timer.delay(attack_delay_time, false, function()
                if self.is_charging_attack then
                    fire(self)
                    self.is_charging_attack = false
                    self.can_attack = false
                    timer.delay(0.25, false, function()
                        self.can_attack = true
                    end)
                end
            end)
        end
    else
        if self.is_charging_attack then
            self.is_charging_attack = false
            if self.charge_timer then
                timer.cancel(self.charge_timer)
                self.charge_timer = nil
            end
        end
    end
end

local function run(self, dt)

    local direction = (input.key_state.right and 1 or 0) - (input.key_state.left and 1 or 0)

    if input.key_state.right and self.wall_contact_right then
        direction = 0
    end
    if input.key_state.left and self.wall_contact_left then
        direction = 0
    end

    if direction ~= 0 then
        local moving_right = direction > 0
        if moving_right ~= (not self.sprite_flipped) then
            -- Reset momentum if direction changes
            if self.ground_contact then
                decay_momentum(self, 2)
            else
                decay_momentum(self, -(momentum_decay/2))
            end
        else
            -- If running in the same direction, increase momentum
            if input.key_state.run then
                self.momentum = math.min(self.momentum + momentum_increment * dt, max_momentum)
            elseif self.ground_contact then
                deaccelerate(self, dt)
            end
        end

        local speed = move_speed + (self.momentum / max_momentum) * (max_speed - move_speed)

        self.velocity.x = direction * speed
    else
        if self.ground_contact then 
            deaccelerate(self, dt, 1.5) 
        end
    end
end

local function on_exit_crouch(self)
    local was_crouching = self.is_crouching
    -- self.is_crouching = input.key_state.crouch

    if was_crouching and not self.is_crouching then
        decay_momentum(self)
    end
end

local function apply_gravity(self, dt)

    if not self.ground_contact then
        local gravity = gravity_rise
        if self.velocity.y < 0 and input.key_state.action and self.is_prone then
            gravity = 0
        elseif self.velocity.y < 0 and input.key_state.action then
            gravity = gravity_fall_resisted
        elseif self.velocity.y < 0 then
            gravity = gravity_fall
        end

        -- Handle falling against wall into open air
        local current_x = self.position.x
        if self.last_x ~= current_x and self.velocity.y < 0 and input.key_state.right and self.wall_contact_right then
            decay_momentum(self)
        end
        if self.last_x ~= current_x and self.velocity.y < 0 and input.key_state.left and self.wall_contact_left then
            decay_momentum(self)
        end
        self.last_x = current_x

        self.velocity.y = self.velocity.y + (-gravity * dt)
        self.velocity.y = utils.clamp(self.velocity.y, y_velocity_max)
    end
end


local function set_facing_direction(self)

    -- Track the most recently pressed direction
    if input.key_state.right and not input.key_state.left then
        self.last_pressed_key = "right"
    elseif input.key_state.left and not input.key_state.right then
        self.last_pressed_key = "left"
    end

    -- Adjust facing direction based on the last pressed key
    if self.last_pressed_key == "right" then
        self.sprite_flipped = false
    elseif self.last_pressed_key == "left" then
        self.sprite_flipped = true
    end

    -- Update sprite flip
    sprite.set_hflip("#base", self.sprite_flipped)
    sprite.set_hflip("#body", self.sprite_flipped)
    sprite.set_hflip("#head", self.sprite_flipped)
    sprite.set_hflip("#accessory", self.sprite_flipped)
end

local function knockback(self, dt)
    local interrupt_movement = false
    if self.knockback_velocity and not (self.wall_contact_left or self.wall_contact_right) then
        self.velocity.x = (self.knockback_velocity.x * knockback_velocity_multiplier)
        interrupt_movement = true
    end
    return interrupt_movement
end

local function calculate_move(self, dt)

    if self.is_prone_without_headroom then

        self.velocity_unparallaxed.x = self.is_prone_direction * 100

        return
    end

    apply_gravity(self, dt)

    if knockback(self, dt) then
        return
    end

    if slide(self, dt) then
        return
    end

    jump(self, dt)

    run(self, dt)

    on_exit_crouch(self)
end

local function animate(self, dt)
    local new_anim

    self.anim_playback_rate = anim_playback_min + (self.momentum / max_momentum) * (anim_playback_max - anim_playback_min)

    if input.key_state.attack then
        go.set("#base", "playback_rate", 1.5)
        go.set("#body", "playback_rate", 1.5)
        go.set("#head", "playback_rate", 1.5)
        go.set("#accessory", "playback_rate", 1.5)
        set_facing_direction(self)
        new_anim = "stand-attack"
    elseif self.velocity.x ~= 0 then
        go.set("#base", "playback_rate", self.anim_playback_rate)
        go.set("#body", "playback_rate", self.anim_playback_rate)
        go.set("#head", "playback_rate", self.anim_playback_rate)
        go.set("#accessory", "playback_rate", self.anim_playback_rate)
        set_facing_direction(self)
        new_anim = "run"
    else
        self.idle_timer = self.idle_timer + dt
        go.set("#base", "playback_rate", 0)
        go.set("#body", "playback_rate", 0)
        go.set("#head", "playback_rate", 0)
        go.set("#accessory", "playback_rate", 0)
    end

    if self.idle_timer >= idle_threshold then
        new_anim = "stand-idle"
    end

    if self.ground_contact then
        if input.key_state.crouch and input.key_state.attack then
            set_facing_direction(self)
            new_anim = "crouch-attack"
        elseif input.key_state.crouch then
            set_facing_direction(self)
            new_anim = "crouch-idle"
        end

        if self.slide_timer > 0 and self.velocity.x ~= 0 or input.key_state.crouch and input.key_state.action then
            new_anim = "crouch-slide"
        end
    else
        if self.velocity.y ~= 0 and input.key_state.attack then
            new_anim = "jump-attack"
        elseif self.velocity.y > 0 then
            new_anim = "jump-air"
        elseif self.velocity.y < 0 then
            new_anim = "jump-ground"
        end
    end

    -- Prevent moving animations against the wall
    if self.ground_contact and (self.wall_contact_right or self.wall_contact_left) then
        if input.key_state.crouch then
            if input.key_state.action then
                new_anim = "crouch-slide"
            elseif input.key_state.attack then
                new_anim = "crouch-attack"
            else
                new_anim = "crouch-idle"
            end
        elseif input.key_state.attack then
            new_anim = "stand-attack"
        else
            new_anim = "stand-idle"
        end
    end

    if self.knockback_velocity then
        if self.ground_contact then
            new_anim = "stand-damaged"
        else
            new_anim = "jump-damaged"
        end
    end

    if self.is_prone or self.is_prone_without_headroom then
        new_anim = "crouch-slide"
    end

    if new_anim then
        if self.current_anim ~= new_anim then
            self.current_anim = new_anim
            sprite.play_flipbook("#base", new_anim, nil, { playback_rate = self.anim_playback_rate })
            sprite.play_flipbook("#body", new_anim, nil, { playback_rate = self.anim_playback_rate })
            sprite.play_flipbook("#head", new_anim, nil, { playback_rate = self.anim_playback_rate })
            sprite.play_flipbook("#accessory", new_anim, nil, { playback_rate = self.anim_playback_rate })
        end
    end
end

function update(self, dt)

    timer.delay(0.10, false, function()
        self.loaded = true
    end)

    if not self.loaded then return end

    local pos = go.get_position()

    collision.handle(self, pos, true)

    attack(self, dt)
    calculate_move(self, dt)


    local player_velocity = self.velocity or vmath.vector3(0, 0, 0)

    self.platform_velocity = self.platform_velocity or vmath.vector3(0, 0, 0)
    local combined_velocity = player_velocity + self.platform_velocity

    animate(self, dt)

    go.set_position(pos + combined_velocity * dt)
    if self.velocity_unparallaxed ~= vmath.vector3(0,0,0) then
        go.set_position(pos + self.velocity_unparallaxed * dt)
        self.velocity_unparallaxed = vmath.vector3(0,0,0)
    end

    if self.momentum < self.last_jump_momentum or self.momentum == 0 then
        self.jump_streak = 0
        self.jump_height_increment = 0
        self.last_jump_momentum = 0
    end

    if self.velocity.x ~= 0 and self.ground_contact then
        self.wall_contact_left = false
        self.wall_contact_right = false
    end

    self.ground_contact = false
    self.platform_velocity = nil
end

function on_message(self, message_id, message, sender)
    if message_id == hash("level_data") then
        self.platforms = message.platforms
        self.enemies = message.enemies

    elseif message_id == hash("match_platform_velocity") then
        self.platform_velocity = message.velocity

    elseif message_id == hash("damage") then
        self.knockback_velocity = message.projectile_velocity
        timer.delay(knockback_delay_time, false, function()
            self.knockback_velocity = nil
        end)

    end
end

function on_input(self, action_id, action)
    if action.pressed or action.repeated then
        self.idle_timer = 0
    end
end